<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use App\Models\Post;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('posts', function (Blueprint $table) {
            $table->id();
            $table->string('title')->nullable();
            $table->string('slug')->nullable();
            $table->text('content');
            $table->datetime('written_at');
            $table->integer('page_view')->default(0);
            $table->timestamps();
        });

        Post::create([
            'title' => 'Have a single point of contact for your side project',
            'slug' => 'single-point-of-contact',
            'content' => 'When your side project gains traction, alongside with being flooded by feature requests, you will receive requests to open a Slack community, or a forum, or to have a newsletter, or to use GitHub issues, or to have a dedicated Twitter account. You will also be tempted to record every feature request — because, well, it’s tempting.\n\nDon’t.\n\nIf you work on a side project, you will fight every minute of your life to find the time to work on it. You probably have a full-time job, a spouse and/or kids, friends and life in general. Finding 1 or 2 hours per day to work on your passion is tough, and precious.\n\nDo you really want to spend this time maintaining a lot of channels to talk to your community? Don’t get me wrong: having a community around your project is essential. However, the cost of having too many official channels is enormous and drains a lot of attention and energy — energy that you will not spend on doing what you loved in the first place: working on the core of your side project. The more communication channels you have, the more people will /steal/ your time by flooding you with requests or support questions. And as you are kind, you will try to please them — but this is endless.\n\nFor your side project, keep one official channel of communication. It could be the GitHub issues of your project or your own Twitter account. That’s it. Communicate with your community through that channel. And focus on your product. When you will find more time to dedicate to it (because the project generates revenues for instance), you will be able to offer other forms of communication. This time will come. But for now, stay sane.',
            'written_at' => '2020-02-25 00:00:00',
        ]);
        Post::create([
            'title' => 'Apple Music is better than Spotify',
            'slug' => 'apple-music-is-better-than-spotify',
            'content' => 'Everyone uses Spotify — at least most people I know. However, Apple Music offers one feature that no one else in the music streaming industry has, which sets it completely apart and make it the go-to app for anyone willing to truly enjoy his music library.\n\nSpotify has some features that Apple Music doesn’t have and which makes it hard to replace:\n\n* It’s fast. Really fast. Songs load instantly, the search is instantaneous.\n* Recommendations are always pertinent. They especially have two automated playlists (Discover Weekly and Release Friday) that blow away every suggestion that Apple Music has ever suggested.\n* Shared public playlists created by other users are an awesome way of discovering stuff that you didn’t know existed. Online resources like [Playlists.net](http://Playlists.net) help you even more in this discovery process.\n\nSpotify helps you find new tunes to listen to. It’s pretty amazing actually how good they are at this. I would say, however, that this comes with a drawback. Spotify is extremely good at helping you finding new stuff to hear over and over and over. I would say that Spotify is capitalism applied to music. You consume your music, as quickly as possible, and move on to the next thing as fast as you can. The desktop app has been built for this rapid consumption. It’s not in any way built to enjoy music the way you want to and it gives you only one feature to do it: playlists. Sometimes I think playlists were one of the first features the team built when they created Spotify and never touched the feature again.\n\nBut there is something else that bothers me with Spotify. Nothing in the app helps your music stand out. Everywhere in the app, songs, and albums you like appear in lists that have no soul. Music is about magic and emotion, and Spotify strips it all away.\n\nApple Music treats your music completely differently. This app is made for people who love their music. The UI puts much more emphasis on the covers. Browse your carefully crafted music library is a joy in this application. Apple Music provides lyrics. They let you change the metadata of your songs if you want, from the lyrics to the cover and everything ID3 tag you want. [Contrary to Spotify]( [https://community.spotify.com/t5/iOS-iPhone-iPad/Shuffle-play-is-not-random/td-p/750619/page/53](https://community.spotify.com/t5/iOS-iPhone-iPad/Shuffle-play-is-not-random/td-p/750619/page/53) ), they offer a true random feature. They also let you upload your own tracks. But the killer feature for me is the ability to let you manage your music the way you want, with what I consider being the most underestimated feature of the music player industry, that is both extremely powerful and actually fun to use: **smart playlists**.\n\n## Enter smart playlists\n\nSmart playlists give programming capabilities to non-technical people. They allow you to group, filter, and organize your songs the way you want it, and with the right combination of parameters, they let you do pretty crazy stuff to continuously rediscover the most important music: the music you once loved and perhaps forgot about it.\n\nSmart playlists are about music you already have in your library and not about music you don’t know about already. While Spotify gives you one way to organize your music (playlists), Apple Music gives you a complete toolset to organize it completely, limited only by your own creativity.\n\nApple Music uses two types of metadata about your music to help you build smart playlists:\n\n* Those about the music object itself, like the genre, released date, composer name, name it.\n* Those about how you use your music: stars that let you rate the music, the number of times you’ve listened to a song, the playlist it belongs to.\n\nWith a combination of these, here is what you can do. Try to beat that, Spotify (or Tidal, or Deezer).\n\nYou can build playlists that group\n\n* the 50 songs that you’ve listened the most this month\n* songs about a specific genre (Electro Irish death metal),\n* every song released in 1950,\n* all songs that you\'ve added in your library in September 2018,\n\nThese are already playlists that you can\'t do with Spotify. But here are more complex playlists that really show you the insane potential of smart playlists:\n\n* songs that you’ve added two months ago and listened less than 10 times overall,\n* songs that you’ve rated between 3 and 5 stars, but listened less than 20 times in the last two years,\n* rap songs added in 2019 that you’ve not skipped once and not yet rated,\n* rated songs that are > 10 minutes not listened in the last year.\n\nThese playlists apply to songs from all sources: your own music that you’ve uploaded to Apple servers, or music from Apple Music (the streaming service). However, there is one thing that you can\'t do with music served by Apple Music: pick songs from another playlist and cross-reference them. It’s too bad because the potential of being able to pick songs from other playlists to compose a new playlist [is particularly insane](https://www.reddit.com/r/DoesAnybodyElse/comments/depap/dae_listen_to_their_music_player_on_shuffle_but/).\n\nIt blows my mind how powerful smart playlists are.\n\n## How I manage my smart playlists\n\nIn my library, I use a combination of folders and emojis to quickly find the playlists I want to listen to. Here is how I organize them:\n\n![sidebar in apple music](/assets/img/itunes-sidebar.jpg)\n\nAnd now the good parts: the smart playlists that I use all the time.\n\n### All songs with at least one star and not listened in the last 10 days\n\n![stars not 10 days](/assets/img/stars_not_10_days.png)\n\n### All non-Apple Music songs with at least one star and listened less than 10 times\n\n![stars not 10 days](/assets/img/star_listened_less_10_times.png)\n\n### All songs added in 2018 between one and five stars not listened in the last month\n\n![stars not 10 days](/assets/img/added_2018_not_listened_last_month.png)\n\n### Songs with a specific genre added but not yet rated\n\n![stars not 10 days](/assets/img/specific_genre_not_rated.png)\n\n### Top 50 songs of the last month (or any timeframe)\n\nThis one is trickier. With Apple Music you can\'t query songs that you’ve listened to during a period of time. You only have the __Last played__ option, which will not help us achieve our goal here.\n\nThe only way I\'ve found to have a top 50 (or 10 or whatever) that is both accurate and static in time, is as follow:\n\n* Create a smart playlist with the end goal in mind. If you want to have a top 50 of April, create a smart playlist listing the 50 songs sorted by Most played in the last 30 days.\n* At the end of the month or the first day of the next month, copy all the songs that appear in this smart playlist, to a regular playlist. That\'s it, this list will exist forever and will not change.\n\n![stars not 10 days](/assets/img/top_50.png)\n\n## Conclusion\n\nI agree that Apple Music has many drawbacks compared to Spotify. Search is deadly slow. Recommendations suck. Apple Beats 1 is simply inaudible. But smart playlists is such a killing feature that I can deal with its problems and still be very happy.',
            'written_at' => '2020-05-02 00:00:00',
        ]);
        Post::create([
            'title' => 'Documentation Driven Development',
            'slug' => 'documentation-driven-development',
            'content' => 'Documentation is hard and feels unrewarding. Therefore, it’s the last thing you write. When you start your project, you have a high level of motivation and this is how your development cycle looks like:\n\n* Write feature\n* Write tests\n* Push features to production\n* Write documentation\n* Publish documentation\n\nAfter a few months, your motivation starts to decrease and your development cycle looks like this:\n\n* Write feature\n* Write tests\n* Push features to production\n* Write documentation\n\nTime passes. Your development cycle now looks like this:\n\n* Write feature\n* Write tests\n* Push features to production\n\n## The many benefits of a great documentation\n\nDocumentation is hard to write and hard to maintain. Even more at the end of the feature cycle, when you’ve forgotten all the edge cases you wrote.\n\nIt’s sad, because there are actually many benefits of having a great documentation, especially with side projects:\n\n* It greatly helps the adoption of your project by other developers, as almost no one will work on your tool if you don\'t provide some kind of documentation.\n* It’s free marketing. Documentation contains all the keywords necessary for your SEO, and you won’t have to write those shitty blog posts that most internet gurus tell you to write and no one wants to read.\n* It’s really useful for your users, as most of them are not actually you, therefore needing guidance on how to use your tool.\n* It reduces the number of customer support tickets you will have to answer to.\n\nA complete, well-written documentation is always the sign of a great product. It’s easily the most powerful tool you have at your disposal if you know nothing about marketing and still want to gain some traction. READMEs are also a very powerful marketing tool that I should write about in the future.\n\n## Change how you write softwares\n\nI suggest to completely change how you write softwares.\n\nStart with the documentation. That means: do not write a single line of code without having completely documented the feature you are about to write.\n\nThen, write the code that supports this documentation, and write tests that match this code. Or write tests then the code if you are fan of TDD — it doesn’t really matter.\n\nSometimes, tests will show you that you missed something in your documentation. Update it accordingly.\n\nThen push both the code and the documentation to production.\n\nLater on, if you need to modify the feature, start by updating your documentation. Then update your code. Always start with the documentation.\n\nIdeally, you would have a rule in your CI that prevent you from committing a feature without the associated documentation. I don\'t know how to do it programmatically, but you can simply have a checklist in your pull request template that lets you achieve this goal.\n\n## Final note\n\nI don\'t like methodologies in general. Don’t waste time with TDD, BDD and other methodologies that seem to be designed to slow down side projects.\n\nWhat’s really important is a software\n\n* That works,\n* That is really fast,\n* That has a great documentation so both developers and users will know how to use it.\n\nPoint 1 is covered by having tests. Write tests, always, but not too many.\n\nPoint 2 comes with experience. Making a software fast is a result of a lot of decisions and should be one of your priority, but you will only know how to it well after a few years of struggling with bad code.\n\nPoint 3 comes by forcing you to write documentation before you do anything.\n\nNothing else matters, really.',
            'written_at' => '2020-08-03 00:00:00',
        ]);
        Post::create([
            'title' => 'Email is not broken',
            'slug' => 'email-is-not-broken',
            'content' => 'There has been a lot of talks about email being broken since the launch of Hey!.\n\nWhy would it be?\n\n* Too much spam.\n* Too many newsletters.\n* Sluggy or unpolished email clients.\n\nI don\'t have any of these problems. Email is not broken at all for me. And I believe [Fastmail](https://fastmail.com) is the main reason why.\n\n## The first rule of email\n\nFirst of all, you should never, ever give your email address to people or systems who would use it in a conversation other than a 1-on-1 relationship.\n\nThat means to not give your email address:\n\n- To someone who would put you in a 50 people private mailing list to invite you for a kid’s birthday — of course not in BCC. Very quickly, your email address will be all around the Internet.\n- To a system, like a newsletter, that will surely resell your data.\n- To a new site when you create your account, that will also surely resell your data.\n\n## If you don\'t give your email address, what should you do\n\nThis is how I envision the perfect system to never be bothered by unsolicited emails ever again:\n\n- Your primary email address should only be given to people you absolutely trust.\n- You need to have one email address per account (or newsletter) that you have. Yes, that means potentially have 400 different email addresses.\n- If you receive spam, you simply delete this email address from your system and you’ll never be bothered again by this spam.\n- You need to be able to quickly identify which site leaked your data. To either update the email address with a new one, or insult the site on Twitter.\n\n## Aliases: the spam destroyer\n\nEnter the power of aliases. Fastmail lets you create as many email addresses as you want, that you can use to receive emails. Use those aliases when you sign up somewhere. If you happen to receive spam, or unwanted emails, simply delete the alias, and never hear about the spam ever again.\n\nAn email address has two parts: the part before the `@` symbol (the local-part), and the part after the `@` symbol (the domain name).\n\nFastmail lets you enter your own local-part, and provides at least 50 domains to choose from.\n\nThe rule is to use a name for this email address that will quickly let you identify which site actually spammed you. You need to follow your own convention to name these aliases. I suggest you follow this: `sitename+few letters of your first name + few letters of your last name` with one of the 50 domains Fastmail gives you to choose from.\n\nLet’s say you are called Henri Lait. If you had to create an account on Twitter, you could use something like “twitterhenril@sent.as”. On Facebook, “facebookhenril@mms.com”. You get the idea.\n\nThen, when you are spammed by one of these sites, or if they end up being leaked, you simply have to delete this alias and simply move on. The spammer will never know that they can’t reach you again. But you will know which site spammed you, or which site sold your data.\n\n## The drawback\n\nThe only drawback of this system is to set it up in the first place. It can be pretty time consuming to update all existing sites or newsletters with a custom email address for each one of these. Also, you need to create an alias for every new account you will want to use in the future. I believe it’s worth it.\n\n## Conclusion\n\nPersonally, I have more than 500 aliases now. Every one of my account has a custom alias. My spam folder currently has only 2 emails, although is empty, most of the time.\n\nIf you use one custom alias per account, and set up 2FA on each one of these, I believe we have one of the most secure system you can find.',
            'written_at' => '2020-08-04 00:00:00',
        ]);
        Post::create([
            'title' => 'Validate your ideas before doing anything vs actually doing stuff',
            'slug' => 'validate-your-ideas-before-doing-anything-vs-actually-doing-stuff',
            'content' => 'If you are on Twitter and follow the indie hacker community or any community about building something, you’ve surely come across the same advice over and over: before doing any work, validate your idea.\n\nAs far as I know, this comes mainly from [the proof of concept Buffer did](https://buffer.com/resources/idea-to-paying-customers-in-7-weeks-how-we-did-it/) before starting their business.\n\nThe concept is to design a simple signup form as quickly as possible, try to reach the community you want to sell your product to, and see if people sign up for your product that doesn’t exist yet.\n\nThis is good advice, for most cases. But there are cases where this will never work.\n\nSometimes, people don’t know they need something before they see it for real, in action. A signup form will not be enough. The product has to be experienced.\n\nFor instance, when Slack was launched, it was expected that no one would want the product, simply because no one had experienced this kind of product before. The CEO even wrote a great email about this, [We don’t sell saddles here](https://medium.com/@stewart/we-dont-sell-saddles-here-4c59524d650d).\n\nIf you sell a product based on a fake screen and a fake marketing promise, you will validate an illusion. You won’t show what your product is. How it feels for real. How good it is. The thousands of little details that actually give your product a personality. The real hard work.\n\nBuilding a product is insanely hard. Validating the idea is as meaningless as having the idea itself. It\'s easy. What\'s hard is the work to actually make this idea a reality.\n\nOnce again, we have glorified the shortest path to success. What those Get rich quickly tweets really say is: validate your idea in one day, because you are excited about it, and because having ideas is exciting, and if it doesn’t stick, move to a new idea. All these are the easy parts, that you can do in a couple of days.\n\nMost products work eventually, as long as the idea is not stupidly stupid–if the founder has enough energy to sustain all the very, very long months or years where you have trouble finding money to pay your rent or your food, while you create the product and market it.',
            'written_at' => '2022-04-06 00:00:00',
        ]);
        Post::create([
            'title' => 'Why I post what I post',
            'slug' => 'why-i-post-what-i-post',
            'content' => 'On Twitter these days, there is two kinds of tweets:\n\n1. People complaining about stuff.\n1. People teaching life lessons that they probably didn’t experience themselves.\n\nThe first category doesn’t bring any value to anyone, apart from the author who feels good after shouting in this empty space that Internet can be. No one cares about you being upset about something, not even the brand you are complaining about.\n\nThe second category also doesn’t bring real value because reading about the 10 novel ways to be happy in life won’t make you feel happy in life. Also, it seems super fake. Perhaps it\'s a cultural thing. In Europe we are more… down to Earth and realistic. In North America, people are super optimistic, and sometimes I feel they are too much. I even made [a comic about this](/comics/43/north-american-friendship/).\n\nBased on those observations, what posts should you write? No idea.\n\nI don’t have a clue about how to grow a social media account and I have definitive proof of that. I have no advice to give on anything, because I don’t know much.\n\nBut here is what I like to read: jokes and news about stuff that people are trying to build (aka what value are you adding to the world every day: joy or updates on tools that improve the world in some ways).\n\nI don\'t want to spend the little time we have on Earth to read about your anger, and I don\'t want to fuel this machine too. The media already bombard us that all the time with depressing news and anger and scandals, because these days everything is scandalous.\n\nI want to try to be positive but realistic, and I want people interested by what I do to feel good after having seen on of my projects.\n\nThis is why I focus personally on these two types of posts:\n\n1. Funny tweets (this includes jokes that I hope make you smile and drawings made on my iPad)\n2. Stuff that I’m building.\n\nMy humour is probably not for everyone, but I hope it will make you smile from time to time.',
            'written_at' => '2022-07-18 00:00:00',
        ]);
        Post::create([
            'title' => 'The hard things in side projects',
            'slug' => 'the-hard-things-in-side-projects',
            'content' => 'I\'ve been working on the rewrite of Monica ([codename Chandler](https://github.com/monicahq/chandler)) for over a year now. In many aspects, Chandler has more robust features than Monica. It also misses a few importants concepts, like conversations, gift management or an API.\n\nAnd more than anything else, it misses a way to charge customers, despite the fact that we\'ve written our [own open source customer portal](https://github.com/monicahq/customers).\n\nHowever, implementing the communication with the customer portal, making it work, disabling features when the customer doesn\'t have the right plan, etc... are really boring and unexciting tasks. So I prefer to focus on new stuff. Exciting stuff. Stuff that makes me learn something. Stuff that does not drive us towards the goal of working full time of the actual project.\n\nBecause that\'s really the consequence. Working on exciting stuff drives us away from shipping stuff to actual users. We can\'t release the new version if we can\'t charge for it. So we wait, implement new and exciting features that will blow users\' minds. But those users still don\'t see this work.\n\nThe hard things with side projects is to force yourself to do unsexy stuff. I hope I will have the strength to bring the unsexy back in February.',
            'written_at' => '2023-02-12 00:00:00',
        ]);
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('posts');
    }
};
